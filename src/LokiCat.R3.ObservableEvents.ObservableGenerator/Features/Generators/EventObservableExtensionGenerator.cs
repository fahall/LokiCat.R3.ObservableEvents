using Microsoft.CodeAnalysis;

namespace LokiCat.R3.ObservableEvents.ObservableGenerator.Features.Generators;

/// <summary>
/// Emits extension methods for converting C# events into R3 observables.
/// </summary>
public static class EventObservableExtensionGenerator
{
    public static void EmitSignalObservableExtensions(GeneratorExecutionContext context)
    {
        const string extensionSource = """
            // <auto-generated />
            #nullable enable
            using R3;

            namespace LokiCat.R3.ObservableEvents;

            public static class EventObservableExtensions
            {
                /// <summary>
                /// Creates an observable for an event with no arguments.
                /// </summary>
                public static Observable<Unit> Event(
                    ref Observable<Unit>? cache,
                    Action<Action> subscribe
                ) =>
                    cache ??= Observable.Create<Unit>(observer => {
                        subscribe(() => observer.OnNext(Unit.Default));
                        return Disposable.Empty;
                    });

                /// <summary>
                /// Creates an observable for an event with one argument.
                /// </summary>
                public static Observable<T> Event<T>(
                    ref Observable<T>? cache,
                    Action<Action<T>> subscribe
                ) =>
                    cache ??= Observable.Create<T>(observer => {
                        subscribe(arg => observer.OnNext(arg));
                        return Disposable.Empty;
                    });

                /// <summary>
                /// Creates an observable for an event with two arguments.
                /// </summary>
                public static Observable<(T1, T2)> Event<T1, T2>(
                    ref Observable<(T1, T2)>? cache,
                    Action<Action<T1, T2>> subscribe
                ) =>
                    cache ??= Observable.Create<(T1, T2)>(observer => {
                        subscribe((a, b) => observer.OnNext((a, b)));
                        return Disposable.Empty;
                    });

                /// <summary>
                /// Creates an observable for an event with three arguments.
                /// </summary>
                public static Observable<(T1, T2, T3)> Event<T1, T2, T3>(
                    ref Observable<(T1, T2, T3)>? cache,
                    Action<Action<T1, T2, T3>> subscribe
                ) =>
                    cache ??= Observable.Create<(T1, T2, T3)>(observer => {
                        subscribe((a, b, c) => observer.OnNext((a, b, c)));
                        return Disposable.Empty;
                    });

                /// <summary>
                /// Creates an observable for an event with four arguments.
                /// </summary>
                public static Observable<(T1, T2, T3, T4)> Event<T1, T2, T3, T4>(
                    ref Observable<(T1, T2, T3, T4)>? cache,
                    Action<Action<T1, T2, T3, T4>> subscribe
                ) =>
                    cache ??= Observable.Create<(T1, T2, T3, T4)>(observer => {
                        subscribe((a, b, c, d) => observer.OnNext((a, b, c, d)));
                        return Disposable.Empty;
                    });

                /// <summary>
                /// Creates an observable for an event with five arguments.
                /// </summary>
                public static Observable<(T1, T2, T3, T4, T5)> Event<T1, T2, T3, T4, T5>(
                    ref Observable<(T1, T2, T3, T4, T5)>? cache,
                    Action<Action<T1, T2, T3, T4, T5>> subscribe
                ) =>
                    cache ??= Observable.Create<(T1, T2, T3, T4, T5)>(observer => {
                        subscribe((a, b, c, d, e) => observer.OnNext((a, b, c, d, e)));
                        return Disposable.Empty;
                    });
            }
            """;

        context.AddSource("EventObservableExtensions.g.cs", extensionSource);
    }
}